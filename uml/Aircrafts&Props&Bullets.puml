@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + update(int score): int
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    - strategy: Strategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + executeStrategy(int LocationX, int LocationY, int SpeedX, int SpeedY, int direction, int power, int faction): List<BaseBullet>
    + setStrategy(Strategy strategy): void
    + {abstract} shoot():List<BaseBullet>
    + {abstract} drop():AbstractProp
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} singleton:HeroAircraft
    + controlThread: Thread
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop():AbstractProp
    + increaseHp(int increase): void
    + fireSupply():void
    + getSingleton(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
}

AbstractAircraft <|-- HeroAircraft
HeroAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop(): List<AbstractProp>
    + update(int score): int
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop():AbstractProp
    + update(int score): int
}
AbstractAircraft <|-- EliteEnemy

class BossEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + drop():AbstractProp
    + update(int score): int
}
AbstractAircraft <|-- BossEnemy

class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
     + update(int score): int
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class AbstractProp{
    - category:int
    - increase:int
    + AbstractProp(int locationX, int locationY, int speedX, int speedY, int category)
    + getCategory():int
    + getIncrease():int
    + forward():void
}

class BloodProp{
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int category)
}

class BombProp{
    - bombSubscribersList: List<BombSubscriber>
    + BombProp(int locationX, int locationY, int speedX, int speedY, int category)
    + addSubscriber(BombSubscriber bombSubscriber): void
    + removeSubscriber(BombSubscriber bombSubscriber): void
    + notifyAllSubscribers(int score): int
}

class BulletProp{
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int category)
}

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp

AbstractFlyingObject <|-- AbstractProp
AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

@enduml