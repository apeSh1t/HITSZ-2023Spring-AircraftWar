@startuml
'https://plantuml.com/class-diagram

interface EnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

class MobEnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

class EliteEnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

class BossEnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

EnemyFactory <|.. MobEnemyFactory
EnemyFactory <|.. EliteEnemyFactory
EnemyFactory <|.. BossEnemyFactory

MobEnemyFactory ..> MobEnemy
EliteEnemyFactory ..> EliteEnemy
BossEnemyFactory ..> BossEnemy

interface PropsFactory
{
   + CreateProp(int locationX, int locationY, int speedX, int speedY, int category): AbstractProp
}

class BloodPropFactory
{
    + CreateProp(int locationX, int locationY, int speedX, int speedY, int category): AbstractProp
}

class BombPropFactory
{
    + CreateProp(int locationX, int locationY, int speedX, int speedY, int category): AbstractProp
}

class BulletPropFactory
{
    + CreateProp(int locationX, int locationY, int speedX, int speedY, int category): AbstractProp
}

PropsFactory <|.. BloodPropFactory
PropsFactory <|.. BombPropFactory
PropsFactory <|.. BulletPropFactory

PropsFactory ..> AbstractProp
BloodPropFactory ..> BloodProp
BombPropFactory ..> BombProp
BulletPropFactory ..> BulletProp

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # strategy: Strategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + executeStrategy(int LocationX, int LocationY, int SpeedX, int SpeedY, int direction, int power, int faction): List<BaseBullet>
    + setStrategy(Strategy strategy): void
    + {abstract} shoot():List<BaseBullet>
    + {abstract} drop():AbstractProp
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} singleton:HeroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop():AbstractProp
    + fireSupply()
    + getSingleton(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
}

AbstractAircraft <|-- HeroAircraft
HeroAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop():AbstractProp
}
AbstractAircraft <|-- EliteEnemy

class BossEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + drop():AbstractProp
}
AbstractAircraft <|-- BossEnemy

class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class AbstractProp{
    # category:int
    # increase:int
    + AbstractProp(int locationX, int locationY, int speedX, int speedY, int category)
    + getCategory():int
    + getIncrease():int
    + forward():void
}

class BloodProp{
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int category)
}

class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY, int category)
}

class BulletProp{
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int category)
}

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp

AbstractFlyingObject <|-- AbstractProp
AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

interface Strategy{
    + shootOperation():List<BaseBullet>
}
AbstractAircraft o--> Strategy

class OperationScatterShoot{
    + shootOperation():List<BaseBullet>
}

class OperationSingleShoot{
    + shootOperation():List<BaseBullet>
}


Strategy <|.. OperationScatterShoot
Strategy <|.. OperationSingleShoot


interface DataDao{
    + {abstract} getAllDatas(): List<GameData>
    + {abstract} doAdd(GameData): void
    + {abstract} writeToFile(): void
    + {abstract} readFromFile(): void
}

class GameData{
    - username:String
    - score:int
    - date:Date
    + GameData(String username, int score, Date date)
    + getScore(): int
    + getUsername(): String
    + getDate(): Date
    + setUsername(String username): void
    + setScore(int score): void
    + setDate(Date date): void
}

class DataDaoImpl{
    - datas: List<GameData>
    + DataDaoImpl()
    + getAllDatas(): List<GameData>
    + doAdd(GameData): void
    + writeToFile(): void
    + readFromFile(): void
}

DataDaoImpl --> GameData
DataDao <|.. DataDaoImpl
@enduml